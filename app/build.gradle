apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
if (!rootProject.plugins.hasPlugin("org.sonarqube")) {
	println("sonarcube not yet applied")
	apply plugin: 'org.sonarqube'
}

android {
	signingConfigs {
		defaultConfig {
			keyAlias 'CheapListKey'
			keyPassword 'cheaplistkeypassword'
			storeFile file('..//keystore/android.jks')
			storePassword 'cheaplistkeystorepassword'
		}
	}
	compileSdkVersion compileSdk
	buildToolsVersion buildTools
	defaultConfig {
		applicationId "hu.tvarga.capstone.cheaplist"
		minSdkVersion minSdk
		targetSdkVersion targetSdk
		versionCode 1
		versionName project.version

		vectorDrawables.useSupportLibrary = true
		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
	}
	buildTypes {
		debug {
			testCoverageEnabled true
		}
		release {
			minifyEnabled false
			shrinkResources false
			zipAlignEnabled true
			debuggable false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.defaultConfig
		}
	}
	buildToolsVersion '26.0.2'
}

configurations { codacy }
repositories {
	maven { url "https://jitpack.io" }
	maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

dependencies {
	codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'

	compile(project(path: ':lib')) {
		exclude group: 'com.google.firebase'
	}
	compile "com.pavelsikun:materialdesignicons:1.0"
	compile "com.android.support:customtabs:$supportLibraryVersion"
	compile "com.android.support:cardview-v7:$supportLibraryVersion"
	compile "com.android.support:design:$supportLibraryVersion"
	compile "com.android.support:appcompat-v7:$supportLibraryVersion"
	compile "com.google.firebase:firebase-core:$firebaseVersion"
	compile "com.google.firebase:firebase-database:$firebaseVersion"
	compile "com.google.firebase:firebase-auth:$firebaseVersion"
	compile "com.google.firebase:firebase-config:$firebaseVersion"
	compile "com.google.firebase:firebase-ads:$firebaseVersion"
	compile "com.google.firebase:firebase-crash:$firebaseVersion"
	compile "com.firebaseui:firebase-ui-auth:$firebaseUIVersion"
	compile "com.firebaseui:firebase-ui-database:$firebaseUIVersion"
	compile 'com.firebase:firebase-jobdispatcher:0.8.3'
	compile "com.google.dagger:dagger:$daggerVersion"
	compile "com.google.dagger:dagger-android:$daggerVersion"
	compile "com.google.dagger:dagger-android-support:$daggerVersion"
	compile "com.jakewharton.timber:timber:4.5.1"
	compile "com.jakewharton:butterknife:8.8.1"
	compile "com.squareup.picasso:picasso:2.5.2"
	compile 'org.greenrobot:eventbus:3.1.0-RC'

	testCompile "junit:junit:4.12"
	testCompile "org.mockito:mockito-core:$mockitoVersion"

	annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"
	annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
	annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	}
	androidTestCompile 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
}


task jacocoMergedTestReport(type: JacocoReport) {

	setSourceDirectories(files(["$buildDir/../src/main/java/hu"]))
	setClassDirectories(fileTree(
			dir: "$buildDir/intermediates/classes/debug/hu",
			excludes: getCoverageExcludes()))

	def jacocoTestFiles = ["$buildDir/jacoco/testDebugUnitTest.exec"]

	String androidTestCoverageFilePath = "$buildDir/outputs/code-coverage/connected/coverage.ec"
	File androidTestCoverage = new File(androidTestCoverageFilePath)
	if (androidTestCoverage != null && androidTestCoverage.exists()) {
		jacocoTestFiles.add(androidTestCoverageFilePath)
	}

	setExecutionData(files(jacocoTestFiles))

	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

def getCoverageExcludes(String format) {
	def excludes = ['**/Manifest*.*',
					'**/BuildConfig.*',
					'**/R.class',
					'**/R$*.class'
	]
	if ("Sonar".equals(format)) {
		return String.join(",", excludes)
	} else {
		return excludes
	}
}

apply plugin: 'com.google.gms.google-services'

def getAndroidTestCoverageFiles() {
	FileCollection androidTestCoverageFiles = fileTree("$buildDir/outputs/code-coverage/connected/flavors") {
		include "**/*.ec"
	}
	return androidTestCoverageFiles
}

sonarqube {
	properties {
		property "sonar.tests", "src/test/java"
		property "sonar.java.binaries",	"${buildDir}/intermediates/classes/debug"
		property "sonar.java.test.binaries", "${buildDir}/intermediates/classes/test/debug"
		property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/testDebugUnitTest.exec"
		property "sonar.jacoco.itReportPath", getAndroidTestCoverageFiles()
		// NOTE: By default the java source set and not the android source set is used
		property "sonar.sources", android.sourceSets.main.java.srcDirs

		property "sonar.junit.reportsPath",	"${buildDir}/test-results/testDebugUnitTest"

		// sonar lint plugin
		//
		// ATTENTION: this file must match the chosen build flavor in the
		// CI build configurations, otherwise lint issues will not be visible in the sonar
		// report. CI Build Configs:
		//  - Android CI -> Sonar preview report generation
		//  - Android Master Sonar ->  SonarQube
		// (both currently call 'lintEnvProdNormalBuildDebug')
		property "sonar.android.lint.report", "${buildDir}/reports/lint-results-debug.xml"
	}
}

// if you get: com.codacy Error: Missing option --projectToken
// then:
// this should be set as environment variable in the CI
// set CODACY_PROJECT_TOKEN=Project API Token
// token from: https://www.codacy.com/app/calebzor/CheapList/settings/integrations

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoMergedTestReport) {
	main = "com.codacy.CodacyCoverageReporter"
	classpath = configurations.codacy
	args = [
			"-l",
			"Java",
			"-r",
			"${buildDir}/reports/jacoco/jacocoMergedTestReport/jacocoMergedTestReport.xml"
	]
}