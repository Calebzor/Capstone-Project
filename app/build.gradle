apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
	signingConfigs {
		defaultConfig {
			keyAlias 'CheapListKey'
			keyPassword 'cheaplistkeypassword'
			storeFile file('..//keystore/android.jks')
			storePassword 'cheaplistkeystorepassword'
		}
	}
	compileSdkVersion compileSdk
	buildToolsVersion buildTools
	defaultConfig {
		applicationId "hu.tvarga.capstone.cheaplist"
		minSdkVersion minSdk
		targetSdkVersion targetSdk
		versionCode 1
		versionName "1.0"

		vectorDrawables.useSupportLibrary = true
		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
	}
	buildTypes {
		debug {
			testCoverageEnabled true
		}
		release {
			minifyEnabled false
			shrinkResources false
			zipAlignEnabled true
			debuggable false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.defaultConfig
		}
	}
	buildToolsVersion '26.0.2'
}

dependencies {
	compile(project(path: ':lib')) {
		exclude group: 'com.google.firebase'
	}
	compile "com.pavelsikun:materialdesignicons:1.0"
	compile "com.android.support:customtabs:$supportLibraryVersion"
	compile "com.android.support:cardview-v7:$supportLibraryVersion"
	compile "com.android.support:design:$supportLibraryVersion"
	compile "com.android.support:appcompat-v7:$supportLibraryVersion"
	compile "com.google.firebase:firebase-core:$firebaseVersion"
	compile "com.google.firebase:firebase-database:$firebaseVersion"
	compile "com.google.firebase:firebase-auth:$firebaseVersion"
	compile "com.google.firebase:firebase-config:$firebaseVersion"
	compile "com.google.firebase:firebase-ads:$firebaseVersion"
	compile "com.firebaseui:firebase-ui-auth:$firebaseUIVersion"
	compile "com.firebaseui:firebase-ui-database:$firebaseUIVersion"
	compile 'com.firebase:firebase-jobdispatcher:0.8.1'
	compile "com.google.dagger:dagger:$daggerVersion"
	compile "com.google.dagger:dagger-android:$daggerVersion"
	compile "com.google.dagger:dagger-android-support:$daggerVersion"
	compile "com.jakewharton.timber:timber:4.5.1"
	compile "com.jakewharton:butterknife:8.8.1"
	compile "com.squareup.picasso:picasso:2.5.2"
	annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"
	annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
	annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
	testCompile "junit:junit:4.12"
	testCompile "org.mockito:mockito-core:$mockitoVersion"
	androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	}
	androidTestCompile 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
}


task jacocoMergedTestReport(type: JacocoReport) {

	setSourceDirectories(files(["$buildDir/../src/main/java/hu"]))
	setClassDirectories(fileTree(
			dir: "$buildDir/intermediates/classes/debug/hu",
			excludes: getCoverageExcludes()))

	def jacocoTestFiles = ["$buildDir/jacoco/testDebugUnitTest.exec"]

	String androidTestCoverageFilePath = "$buildDir/outputs/code-coverage/connected/coverage.ec"
	File androidTestCoverage = new File(androidTestCoverageFilePath)
	if (androidTestCoverage != null && androidTestCoverage.exists()) {
		jacocoTestFiles.add(androidTestCoverageFilePath)
	}

	setExecutionData(files(jacocoTestFiles))

	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}

def getCoverageExcludes(String format) {
	def excludes = ['**/Manifest*.*',
					'**/BuildConfig.*',
					'**/R.class',
					'**/R$*.class',
					'**/a/d/e/f.class'
	];
	if ("TeamCity".equals(format)) {
		return String.join(" ", excludes)
	} else if ("Sonar".equals(format)) {
		return String.join(",", excludes)
	} else {
		return excludes
	}
}

apply plugin: 'com.google.gms.google-services'